syntax = "proto3";
option go_package = "github.com/argoproj/argo/cmd/server/workflow";


import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";

// Workflow Service
//
// Workflow Service API performs CRUD actions against application resources
package workflow;

message SubmitOptions{
    string Name = 1;
    string GenerateName = 2;
    string InstanceID = 3;
    string Entrypoint = 4;
    repeated string Parameters = 5;
	string ServiceAccount = 6;
	bool ServerDryRun = 7;
	string Labels = 8;
    k8s.io.apimachinery.pkg.apis.meta.v1.OwnerReference OwnerReference = 9;

}

message WorkflowCreateRequest{
    string Namespace = 1;
    github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow Workflow = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions CreateOptions = 3;
    SubmitOptions SubmitOptions = 4;
}

message WorkflowGetRequest{
    string WorkflowName = 1;
    string Namespace = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions GetOptions =3;
}

message WorkflowListRequest{
    string Namespace = 1;
    k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions ListOptions =2;
}

message WorkflowUpdateRequest{
    string WorkflowName = 1;
    string Namespace = 2;
    bool Memoized = 3;
}

message WorkflowLogRequest{
    string WorkflowName = 1;
    string Namespace = 2;
    string PodName = 3;
    string Container = 4;
    k8s.io.api.core.v1.PodLogOptions logOptions = 5;
}


message WorkflowDeleteRequest{
    string WorkflowName = 1;
    string Namespace = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions DeleteOptions =3;
}
message WorkflowDeleteResponse{
    string WorkflowName = 1;
    string Status = 2;
}

message LogEntry {
    string content = 1;
    k8s.io.apimachinery.pkg.apis.meta.v1.Time timeStamp = 2;
}


service WorkflowService {
    rpc Create(WorkflowCreateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			post: "/api/v1/workflows"
			body: "*"
		};
    }

    rpc Get(WorkflowGetRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http).get = "/api/v1/workflows/{Namespace}/{WorkflowName}";
    }

    rpc List(WorkflowListRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.WorkflowList){
        option (google.api.http).get = "/api/v1/workflows/{Namespace}";
    }

    rpc Delete(WorkflowDeleteRequest) returns (WorkflowDeleteResponse){
        option (google.api.http).delete = "/api/v1/workflows/{Namespace}/{WorkflowName}";
    }

    rpc Retry(WorkflowUpdateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			put: "/api/v1/workflows/{Namespace}/{WorkflowName}/retry"
			body: "*"
		};
    }

    rpc Resubmit(WorkflowUpdateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			put: "/api/v1/workflows/{Namespace}/{WorkflowName}/resubmit"
			body: "*"
		};
    }

    rpc Resume(WorkflowUpdateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			put: "/api/v1/workflows/{Namespace}/{WorkflowName}/resume"
			body: "*"
		};
    }

    rpc Suspend(WorkflowUpdateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			put: "/api/v1/workflows/{Namespace}/{WorkflowName}/suspend"
			body: "*"
		};
    }

    rpc Terminate(WorkflowUpdateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			put: "/api/v1/workflows/{Namespace}/{WorkflowName}/terminate"
			body: "*"
		};
    }

    rpc Lint(WorkflowCreateRequest) returns (github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow){
        option (google.api.http) = {
			post: "/api/v1/workflows/lint"
			body: "*"
		};
    }

    // PodLogs returns stream of log entries for the specified pod. Pod
    rpc PodLogs(WorkflowLogRequest) returns (stream LogEntry) {
        option (google.api.http).get = "/api/v1/workflow/{Namespace}/{WorkflowName}/pods/{PodName}/logs";
    }

    // Watch returns stream of application change events.
    rpc Watch(WorkflowGetRequest) returns (stream github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Workflow) {
        option (google.api.http).get = "/api/v1/stream/workflows/{Namespace}/{WorkflowName}";
    }
}